apiVersion: v1
kind: Template
metadata:
  name: openshift-rails
  labels:
    template: openshift-rails
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: rails
- description: Git source URI for application
  name: SOURCE_URL
  required: true
  value: https://github.com/det-kgl-bibliotek/testOpenShift
- description: Git branch/tag reference
  name: SOURCE_REF
  value: master
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: ${APPLICATION_NAME}
      generation: null
      importPolicy: {}
      name: latest
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: ${SOURCE_REF}
        uri: ${SOURCE_URL}
      type: Git
      dockerfile: |-
        FROM ruby:latest

        RUN mkdir /${APPLICATION_NAME}

        WORKDIR /${APPLICATION_NAME}

        COPY Gemfile Gemfile.lock /${APPLICATION_NAME}/

        RUN bundle install

        COPY . /${APPLICATION_NAME}

        RUN chgrp -R 0 /${APPLICATION_NAME} && \
            chmod -R g=u /${APPLICATION_NAME}

        EXPOSE 3000
        CMD bundle exec rails s -p 3000 -b '0.0.0.0'
    strategy:
      dockerStrategy:
      type: Docker
    triggers:
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - image: ' '
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 3000
          resources: {}
        restartPolicy: Always
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: "3000-tcp"
      port: 3000
      targetPort: 3000
    selector:
      deploymentconfig: ${APPLICATION_NAME}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
    path: /
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    port:
      targetPort: "3000-tcp"
    wildcardPolicy: None
    host:
